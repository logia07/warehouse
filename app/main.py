from contextlib import asynccontextmanager
from fastapi import FastAPI, Depends
from app.database import Base, engine, SessionLocal
from app.models.category import Category
from app.models.user import User
from app.security import get_password_hash
from app.api.items import router as items_router
from app.api.categories import router as categories_router
from app.api.auth import router as auth_router

# ‚¨áÔ∏è –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from fastapi.staticfiles import StaticFiles


@asynccontextmanager
async def lifespan(app: FastAPI):
    Base.metadata.create_all(bind=engine)
    db = SessionLocal()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for name in ["–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", "–¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞—à–∏–Ω—ã", "–ü—Ä–æ—á–µ–µ"]:
        if not db.query(Category).filter(Category.name == name).first():
            db.add(Category(name=name))

    # –°–æ–∑–¥–∞–Ω–∏–µ admin
    if not db.query(User).filter(User.username == "admin").first():
        db.add(User(
            username="admin",
            hashed_password=get_password_hash("admin123"),
            role="admin"
        ))
    db.commit()
    db.close()
    yield


# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="–°–∫–ª–∞–¥ –¢–æ–≤–∞—Ä–æ–≤", lifespan=lifespan)

# üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏–∫—É –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è app
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth_router, prefix="/auth")
app.include_router(items_router)
app.include_router(categories_router)


@app.get("/")
def root():
    return {"message": "–°–∫–ª–∞–¥ –∑–∞–ø—É—â–µ–Ω! /docs"}